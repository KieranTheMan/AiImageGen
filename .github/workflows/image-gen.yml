name: ImageGen CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
permissions:
  contents: read
  pull-requests: write
  packages: write # Required for pushing Docker images to GitHub Packages

jobs:
  # ----------------------------------------------------
  # Job 1: Build and Test the Client (React App)
  # ----------------------------------------------------
  client_build_and_test:
    name: Build & Test Client
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install root dependencies (Jest and test tools)
        run: npm ci
        working-directory: .

      - name: Install client dependencies
        run: npm ci
        working-directory: client

      - name: Run ESLint on client
        run: npm run lint
        working-directory: client

      - name: Run Jest tests with coverage on client
        run: npm run test:coverage -- --selectProjects=client
        working-directory: .

      - name: Build client
        run: npm run build
        working-directory: client

      - name: Upload client coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: client-coverage
          path: coverage/
          retention-days: 7
        if: always()

      - name: Upload client build artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-build-artifact
          path: client/dist/

  # ----------------------------------------------------
  # Job 2: Build and Test the Server (Node.js/Express)
  # ----------------------------------------------------
  server_build_and_test:
    name: Build & Test Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install root dependencies (Jest and test tools)
        run: npm ci
        working-directory: .

      - name: Install server dependencies
        run: npm ci
        working-directory: server

      - name: Run ESLint on server
        run: npm run lint
        working-directory: server

      - name: Run Jest tests with coverage on server
        run: npm run test:coverage -- --selectProjects=server
        working-directory: .

      - name: Upload server coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: coverage/
          retention-days: 7
        if: always()

  # ----------------------------------------------------
  # Job 3: Build and Push Docker Images to ECR
  # ----------------------------------------------------
  build_and_push_images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [client_build_and_test, server_build_and_test]
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::966821290687:role/github-actions-role
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build and push frontend image
      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ai-gen-app-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                       -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                       -f client/dockerfile client/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Build and push backend image
      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ai-gen-app-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                 -f server/dockerfile server/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest


  # ----------------------------------------------------
  # Job 4: Deploy the Full-Stack Application
  # ----------------------------------------------------
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [client_build_and_test, server_build_and_test, build_and_push_images]
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download client build artifact
        uses: actions/download-artifact@v4
        with:
          name: client-build-artifact
          path: client/dist/

      # The client deployment AWS would use the downloaded artifact
      - name: Deploy to Production
        run: echo "Deployment to production is now ready. Add your deployment script here."
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}